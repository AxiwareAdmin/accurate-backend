package com.accurate.dao.invoice;

import java.util.ArrayList;
import java.util.List;

import org.apache.log4j.Logger;
import org.hibernate.Criteria;
import org.hibernate.Session;
import org.hibernate.SessionFactory;
import org.hibernate.criterion.Restrictions;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.ApplicationContext;
import org.springframework.context.support.ClassPathXmlApplicationContext;
import org.springframework.stereotype.Repository;
import org.springframework.transaction.annotation.Transactional;

import com.accurate.action.invoice.InvoiceController;
import com.accurate.model.invoice.CustomerDO;
import com.accurate.model.invoice.InvoiceDO;
import com.accurate.model.invoice.InvoiceProductDO;
@Repository
public class InvoiceDao {
	
	private final static Logger LOGGER=Logger.getLogger(InvoiceController.class);
	
	@Autowired
	SessionFactory sessionFactory;
	
	@SuppressWarnings("deprecation")
	@Transactional
	public List<CustomerDO> getCustometList(){
		LOGGER.info("InvoiceDao :: getCustomerList :: Start ");
		List<CustomerDO> custList = new ArrayList<CustomerDO>();
		try {
			
			Session session=getSession();
			Criteria criteria=session.createCriteria(CustomerDO.class);
			custList=criteria.list();
			
			
		}catch(Exception e) {
			LOGGER.error("Exception occured in InvoiceDao :: GetCustomerList ");
		}
		LOGGER.info("InvoiceDao :: getCustomerList method end");
		return custList;
	}
	
	public CustomerDO getCustomerById(Integer custId){
		LOGGER.info("InvoiceDao :: getCustomerById :: Start ");
		CustomerDO customerDO=null;
		try {
			
			Session session=getSession();
			Criteria criteria=session.createCriteria(CustomerDO.class);
			criteria.add(Restrictions.eq("customerId",custId));
			customerDO=(CustomerDO)criteria.uniqueResult();
			
			
		}catch(Exception e) {
			LOGGER.error("Exception occured in InvoiceDao :: getCustomerById ");
		}
		LOGGER.info("InvoiceDao :: getCustomerById method end");
		return customerDO;
	}
	
	public InvoiceProductDO getProductById(Integer prodId){
		LOGGER.info("InvoiceDao :: getProductById :: Start ");
		InvoiceProductDO productDO=null;
		try {
			
			Session session=getSession();
			Criteria criteria=session.createCriteria(InvoiceProductDO.class);
			criteria.add(Restrictions.eq("customerId",custId));
			productDO=(InvoiceProductDO)criteria.uniqueResult();
			
			
		}catch(Exception e) {
			LOGGER.error("Exception occured in InvoiceDao :: getProductById ");
		}
		LOGGER.info("InvoiceDao :: getProductById method end");
		return productDO;
	}
	
	

	public List<InvoiceDO> getInvoiceList(){
		LOGGER.info("InvoiceDao :: getInvoiceList :: Start ");
		List<InvoiceDO> invoiceList = new ArrayList<InvoiceDO>();
		try {
			
			Session session=getSession();
			Criteria criteria=session.createCriteria(InvoiceDO.class);
			invoiceList=criteria.list();
			
			
		}catch(Exception e) {
			LOGGER.error("Exception occured in InvoiceDao :: getInvoiceList ");
		}
		LOGGER.info("InvoiceDao :: getInvoiceList method end");
		return invoiceList;
	}
	
	public List<InvoiceProductDO> getInvoiceProductList(){
		LOGGER.info("InvoiceDao :: getInvoiceProductList :: Start ");
		List<InvoiceProductDO> invoiceProductList = new ArrayList<InvoiceProductDO>();
		try {
			
			Session session=getSession();
			Criteria criteria=session.createCriteria(InvoiceProductDO.class);
			invoiceProductList=criteria.list();
			
			
		}catch(Exception e) {
			LOGGER.error("Exception occured in InvoiceDao :: getInvoiceProductList ");
		}
		LOGGER.info("InvoiceDao :: getInvoiceProductList method end");
		return invoiceProductList;
	}
	
	
	
	
	
	
	public Session getSession() {
		Session session=null;
		try {
		session=sessionFactory.getCurrentSession();
		}catch(Exception e) {
			session=sessionFactory.openSession();
		}
		return session;
	}
	
	public void closeSession(Session session) {
		if(session!=null && session.isOpen()) {
			session.close();
		}
	}
	
	
}
